def min_path_distance(matrix):
    if not matrix:
        return 0
    
    rows = len(matrix)
    cols = len(matrix[0])
    
    # Create a DP table to store the minimum path distances
    dp = [[0] * cols for _ in range(rows)]
    
    # Initialize the starting point
    dp[0][0] = matrix[0][0]
    
    # Initialize the first row (can only come from the left)
    for col in range(1, cols):
        dp[0][col] = dp[0][col - 1] + matrix[0][col]
        
    # Initialize the first column (can only come from above)
    for row in range(1, rows):
        dp[row][0] = dp[row - 1][0] + matrix[row][0]
    
    # Fill the DP table
    for row in range(1, rows):
        for col in range(1, cols):
            dp[row][col] = matrix[row][col] + min(dp[row - 1][col], dp[row][col - 1])
    
    # Return the minimum path distance to the bottom-right corner
    return dp[rows - 1][cols - 1]

# Test case
matrix = [
    [1, 3, 5, 8],
    [4, 2, 1, 7],
    [4, 3, 2, 3]
]

min_distance = min_path_distance(matrix)
print("Minimum Path Distance:", min_distance)
